name: Deploy Textract Services

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Set AWS Account ID as Environment Variable
      - name: Set AWS Account ID
        run: echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)" >> $GITHUB_ENV

      # Step 4: Prepare Lambda Code
      - name: Prepare Lambda Code
        run: |
          mkdir -p build
          zip -j build/lambda_function.zip src/lambda_function.py
      
      - name: Check Stack Status
        id: check-stack
        run: |
          # Handle non-existent stack gracefully
          if ! aws cloudformation describe-stacks --stack-name textract-stack > /dev/null 2>&1; then
            echo "Stack does not exist"
            echo "stack_exists=false" >> $GITHUB_ENV
            exit 0
          fi
            
          # Check status only if stack exists
          STACK_STATUS=$(aws cloudformation describe-stacks --stack-name textract-stack --query 'Stacks[0].StackStatus' --output text)
          echo "stack_status=$STACK_STATUS" >> $GITHUB_ENV
          echo "stack_exists=true" >> $GITHUB_ENV
            
          if [ "$STACK_STATUS" = "ROLLBACK_COMPLETE" ]; then
            echo "Deleting stack in ROLLBACK_COMPLETE state..."
            aws cloudformation delete-stack --stack-name textract-stack
            aws cloudformation wait stack-delete-complete --stack-name textract-stack
          fi

      # Step 5: Deploy Initial Stack
      - name: Deploy Initial Stack
        run: |
          aws cloudformation deploy \
            --stack-name textract-stack \
            --template-file textract.yaml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides AccountId=$AWS_ACCOUNT_ID

      # Step 6: Wait for S3 Bucket
      - name: Wait for S3 Bucket
        run: |
          S3_BUCKET_NAME="textract-lambda-code-bucket-${{ env.AWS_ACCOUNT_ID }}"
          MAX_RETRIES=30
          RETRY_COUNT=0
          until aws s3api head-bucket --bucket $S3_BUCKET_NAME 2>/dev/null; do
            if [ $RETRY_COUNT -eq $MAX_RETRIES ]; then
              echo "Error: S3 bucket creation timeout"
              exit 1
            fi
            echo "Waiting for S3 bucket creation..."
            sleep 10
            RETRY_COUNT=$((RETRY_COUNT+1))
          done

      # Step 7: Upload Lambda Code
      - name: Upload Lambda Code
        run: |
          S3_BUCKET_NAME="textract-lambda-code-bucket-${{ env.AWS_ACCOUNT_ID }}"
          aws s3 cp build/lambda_function.zip s3://$S3_BUCKET_NAME/lambda_function.zip

      # Step 8: Verify Lambda Code Upload
      - name: Verify Lambda Code Upload
        run: |
          S3_BUCKET_NAME="textract-lambda-code-bucket-${{ env.AWS_ACCOUNT_ID }}"
          if ! aws s3api head-object --bucket $S3_BUCKET_NAME --key lambda_function.zip; then
            echo "Error: Lambda code not found in S3"
            exit 1
          fi

      # Step 9: Update Lambda Function
      - name: Update Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name TextractFunction \
            --s3-bucket textract-lambda-code-bucket-${{ env.AWS_ACCOUNT_ID }} \
            --s3-key lambda_function.zip

      # Step 10: Verify Lambda Update
      - name: Verify Lambda Update
        run: |
          aws lambda wait function-updated --function-name TextractFunction
          FUNCTION_STATE=$(aws lambda get-function --function-name TextractFunction --query 'Configuration.State' --output text)
          if [ "$FUNCTION_STATE" != "Active" ]; then
            echo "Error: Lambda function not active"
            exit 1
          fi

      # Step 11: Cleanup Local Files
      - name: Cleanup
        if: always()
        run: rm -rf build