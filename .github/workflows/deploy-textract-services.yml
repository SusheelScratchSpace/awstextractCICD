name: AWS Textract Workflow

on:
  push:
    branches:
      - main  # Trigger the workflow on pushes to the 'main' branch
  workflow_dispatch:  # Allow manual triggering for delete services

jobs:
  build:
    name: Build Resources
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 2.1: Install AWS CLI v2 (if not already installed)
      - name: Install AWS CLI v2
        run: |
          if ! command -v aws &> /dev/null; then
            echo "AWS CLI not found. Installing..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
          else
            echo "AWS CLI is already installed."
          fi

      # Step 2.2: Install boto3 (if not already installed)
      - name: Install boto3
        run: |
          if ! python3 -c "import boto3" &> /dev/null; then
            echo "boto3 not found. Installing..."
            python3 -m pip install boto3
          else
            echo "boto3 is already installed."
          fi

  deploy:
    name: Deploy Resources
    runs-on: ubuntu-latest
    needs: build  # Ensure the build job completes before deploying

    steps:
      # Step 1: Create S3 Buckets
      - name: Create S3 Buckets
        run: |
          # Generate unique bucket names
          LAMBDA_CODE_BUCKET="python-code-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}"
          TEXTRACT_UPLOAD_BUCKET="upload-textract-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}"

          # Create Lambda code bucket
          if aws s3api head-bucket --bucket $LAMBDA_CODE_BUCKET > /dev/null 2>&1; then
            echo "Bucket $LAMBDA_CODE_BUCKET already exists. Skipping creation."
          else
            echo "Creating bucket $LAMBDA_CODE_BUCKET..."
            if [ "${{ secrets.AWS_REGION }}" = "us-east-1" ]; then
              aws s3api create-bucket --bucket $LAMBDA_CODE_BUCKET
            else
              aws s3api create-bucket \
                --bucket $LAMBDA_CODE_BUCKET \
                --region ${{ secrets.AWS_REGION }} \
                --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
            fi
          fi

          # Create Textract upload bucket
          if aws s3api head-bucket --bucket $TEXTRACT_UPLOAD_BUCKET > /dev/null 2>&1; then
            echo "Bucket $TEXTRACT_UPLOAD_BUCKET already exists. Skipping creation."
          else
            echo "Creating bucket $TEXTRACT_UPLOAD_BUCKET..."
            if [ "${{ secrets.AWS_REGION }}" = "us-east-1" ]; then
              aws s3api create-bucket --bucket $TEXTRACT_UPLOAD_BUCKET
            else
              aws s3api create-bucket \
                --bucket $TEXTRACT_UPLOAD_BUCKET \
                --region ${{ secrets.AWS_REGION }} \
                --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
            fi
          fi

          # Attach bucket policy to Lambda code bucket
          echo '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "AWS": "arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/TextractLambdaExecutionRole"
                },
                "Action": "s3:PutObject",
                "Resource": "arn:aws:s3:::'$LAMBDA_CODE_BUCKET'/*"
              }
            ]
          }' > lambda-code-bucket-policy.json
          aws s3api put-bucket-policy \
            --bucket $LAMBDA_CODE_BUCKET \
            --policy file://lambda-code-bucket-policy.json

          # Attach bucket policy to Textract upload bucket
          echo '{
            "Version": "2012-10-17",
            "Statement": [
              {
                "Effect": "Allow",
                "Principal": {
                  "Service": "lambda.amazonaws.com"
                },
                "Action": "s3:GetObject",
                "Resource": "arn:aws:s3:::'$TEXTRACT_UPLOAD_BUCKET'/*"
              }
            ]
          }' > textract-upload-bucket-policy.json
          aws s3api put-bucket-policy \
            --bucket $TEXTRACT_UPLOAD_BUCKET \
            --policy file://textract-upload-bucket-policy.json

      # Step 2: Create DynamoDB Table
      - name: Create DynamoDB Table
        run: |
          if aws dynamodb describe-table --table-name TextractData > /dev/null 2>&1; then
            echo "DynamoDB table TextractData already exists. Skipping creation."
          else
            echo "Creating DynamoDB table TextractData..."
            aws dynamodb create-table \
              --table-name TextractData \
              --attribute-definitions AttributeName=DocumentId,AttributeType=S \
              --key-schema AttributeName=DocumentId,KeyType=HASH \
              --provisioned-throughput ReadCapacityUnits=5,WriteCapacityUnits=5
          fi

      # Step 3: Create IAM Role
      - name: Create IAM Role
        run: |
          if aws iam get-role --role-name TextractLambdaExecutionRole > /dev/null 2>&1; then
            echo "IAM role TextractLambdaExecutionRole already exists. Skipping creation."
          else
            echo "Creating IAM role TextractLambdaExecutionRole..."
            echo '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Principal": {
                    "Service": "lambda.amazonaws.com"
                  },
                  "Action": "sts:AssumeRole"
                }
              ]
            }' > assume-role-policy.json
            aws iam create-role \
              --role-name TextractLambdaExecutionRole \
              --assume-role-policy-document file://assume-role-policy.json
            echo '{
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "textract:*",
                    "dynamodb:*",
                    "s3:GetObject",
                    "s3:PutObject"
                  ],
                  "Resource": [
                    "arn:aws:s3:::python-code-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}/*",
                    "arn:aws:s3:::upload-textract-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}/*",
                    "arn:aws:dynamodb:::table/TextractData"
                  ]
                }
              ]
            }' > policy.json
            aws iam put-role-policy \
              --role-name TextractLambdaExecutionRole \
              --policy-name TextractAndDynamoDBPolicy \
              --policy-document file://policy.json
            echo "Waiting for IAM role to propagate..."
            sleep 10
          fi

      # Step 4: Deploy or Update Lambda Function
      - name: Deploy or Update Lambda Function
        run: |
          LAMBDA_CODE_BUCKET="python-code-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}"

          # Zip the Lambda function code
          zip lambda_function.zip src/lambda_function.py
          
          # Upload the zipped file to the Lambda code bucket
          aws s3 cp lambda_function.zip s3://$LAMBDA_CODE_BUCKET/
          
          # Get the IAM Role ARN
          ROLE_ARN=$(aws iam get-role --role-name TextractLambdaExecutionRole --query 'Role.Arn' --output text)
          
          # Check if the Lambda function exists
          if aws lambda get-function --function-name TextractFunction > /dev/null 2>&1; then
            echo "Lambda function exists. Updating code..."
            aws lambda update-function-code \
              --function-name TextractFunction \
              --s3-bucket $LAMBDA_CODE_BUCKET \
              --s3-key lambda_function.zip
          else
            echo "Lambda function does not exist. Creating function..."
            aws lambda create-function \
              --function-name TextractFunction \
              --runtime python3.8 \
              --role $ROLE_ARN \
              --handler lambda_function.lambda_handler \
              --code S3Bucket=$LAMBDA_CODE_BUCKET,S3Key=lambda_function.zip \
              --timeout 300
          fi

      # Step 5: Configure S3 Bucket Notification
      - name: Configure S3 Bucket Notification
        run: |
          TEXTRACT_UPLOAD_BUCKET="upload-textract-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}"
          LAMBDA_ARN=$(aws lambda get-function --function-name TextractFunction --query 'Configuration.FunctionArn' --output text)
          aws lambda add-permission \
            --function-name TextractFunction \
            --statement-id s3invoke \
            --action lambda:InvokeFunction \
            --principal s3.amazonaws.com \
            --source-arn arn:aws:s3:::$TEXTRACT_UPLOAD_BUCKET || true
          echo '{
            "LambdaFunctionConfigurations": [
              {
                "LambdaFunctionArn": "'$LAMBDA_ARN'",
                "Events": ["s3:ObjectCreated:Put"]
              }
            ]
          }' > notification.json
          aws s3api put-bucket-notification-configuration \
            --bucket $TEXTRACT_UPLOAD_BUCKET \
            --notification-configuration file://notification.json

  delete:
    name: Delete Resources
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'workflow_dispatch' }}  # Only run when manually triggered

    steps:
      - name: Cleanup AWS Resources
        run: |
          echo "Cleaning up AWS resources..."

          # Delete the Lambda function
          if aws lambda get-function --function-name TextractFunction > /dev/null 2>&1; then
            echo "Deleting Lambda function TextractFunction..."
            aws lambda delete-function --function-name TextractFunction
          else
            echo "Lambda function TextractFunction does not exist. Skipping."
          fi

          # Delete the DynamoDB table
          if aws dynamodb describe-table --table-name TextractData > /dev/null 2>&1; then
            echo "Deleting DynamoDB table TextractData..."
            aws dynamodb delete-table --table-name TextractData
          else
            echo "DynamoDB table TextractData does not exist. Skipping."
          fi

          # Delete the S3 bucket for Textract uploads and its contents
          if aws s3api head-bucket --bucket upload-textract-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }} > /dev/null 2>&1; then
            echo "Deleting all objects in S3 bucket upload-textract-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}..."
            aws s3 rm s3://upload-textract-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }} --recursive
            echo "Deleting S3 bucket upload-textract-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}..."
            aws s3api delete-bucket --bucket upload-textract-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}
          else
            echo "S3 bucket upload-textract-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }} does not exist. Skipping."
          fi

          # Delete the S3 bucket for Lambda code and its contents
          if aws s3api head-bucket --bucket python-code-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }} > /dev/null 2>&1; then
            echo "Deleting all objects in S3 bucket python-code-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}..."
            aws s3 rm s3://python-code-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }} --recursive
            echo "Deleting S3 bucket python-code-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}..."
            aws s3api delete-bucket --bucket python-code-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}
          else
            echo "S3 bucket python-code-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }} does not exist. Skipping."
          fi

          # Delete the IAM role
          if aws iam get-role --role-name TextractLambdaExecutionRole > /dev/null 2>&1; then
            echo "Detaching policies from IAM role TextractLambdaExecutionRole..."
            aws iam delete-role-policy --role-name TextractLambdaExecutionRole --policy-name TextractAndDynamoDBPolicy
            echo "Deleting IAM role TextractLambdaExecutionRole..."
            aws iam delete-role --role-name TextractLambdaExecutionRole
          else
            echo "IAM role TextractLambdaExecutionRole does not exist. Skipping."
          fi