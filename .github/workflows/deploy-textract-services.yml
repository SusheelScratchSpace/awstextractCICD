name: Deploy Textract Services

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout Code
      - name: Checkout Code
        uses: actions/checkout@v3

      # Step 2: Configure AWS Credentials
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      # Step 3: Set AWS Account ID as Environment Variable
      - name: Set AWS Account ID
        run: echo "AWS_ACCOUNT_ID=$(aws sts get-caller-identity --output text --query Account)" >> $GITHUB_ENV

      # Step 4: Validate CloudFormation Template
      - name: Validate CloudFormation Template
        run: |
          aws cloudformation validate-template --template-body file://textract.yaml

      # Step 5: Check Stack Status and Delete if in ROLLBACK_COMPLETE
      - name: Check Stack Status
        id: check-stack-status
        run: |
          if aws cloudformation describe-stacks --stack-name textract-stack 2>/dev/null; then
            STACK_STATUS=$(aws cloudformation describe-stacks --stack-name textract-stack --query "Stacks[0].StackStatus" --output text)
            if [ "$STACK_STATUS" == "ROLLBACK_COMPLETE" ]; then
              aws cloudformation delete-stack --stack-name textract-stack
              aws cloudformation wait stack-delete-complete --stack-name textract-stack
              echo "stack_deleted=true" >> $GITHUB_ENV
            else
              echo "stack_deleted=false" >> $GITHUB_ENV
            fi
          else
            echo "stack_deleted=true" >> $GITHUB_ENV
          fi

      # Step 6: Deploy CloudFormation Stack
      - name: Deploy CloudFormation Stack
        run: |
          aws cloudformation deploy \
            --stack-name textract-stack \
            --template-file textract.yaml \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides AccountId=$AWS_ACCOUNT_ID

      # Step 7: Prepare Lambda Code
      - name: Prepare Lambda Code
        run: |
          mkdir -p build
          zip -j build/lambda_function.zip src/lambda_function.py

      # Step 8: Upload Lambda Code
      - name: Upload Lambda Code
        run: |
          S3_BUCKET_NAME="textract-lambda-code-bucket-${{ env.AWS_ACCOUNT_ID }}"
          aws s3 cp build/lambda_function.zip s3://$S3_BUCKET_NAME/lambda_function.zip

      # Step 9: Update Lambda Function
      - name: Update Lambda Function
        run: |
          aws lambda update-function-code \
            --function-name TextractFunction \
            --s3-bucket textract-lambda-code-bucket-${{ env.AWS_ACCOUNT_ID }} \
            --s3-key lambda_function.zip

      # Step 10: Cleanup Local Files
      - name: Cleanup
        if: always()
        run: rm -rf build