name: AWS Textract Workflow

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  deploy:
    name: Deploy AWS Resources
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      # Step 3: Verify Lambda Function Code Exists
      - name: Verify Lambda Function Code
        run: |
          if [ ! -f src/lambda_function.py ]; then
            echo "Error: Lambda function code (src/lambda_function.py) is missing."
            exit 1
          fi

      # Step 4: Zip the Lambda Function Code
      - name: Zip Lambda Function Code
        run: |
          mkdir -p build
          zip -j build/lambda_function.zip src/lambda_function.py

      # Step 5: Create S3 Bucket for Lambda Code
      - name: Create S3 Bucket for Lambda Code
        run: |
          LAMBDA_CODE_BUCKET="python-code-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}"
          if aws s3api head-bucket --bucket $LAMBDA_CODE_BUCKET > /dev/null 2>&1; then
            echo "Bucket $LAMBDA_CODE_BUCKET already exists. Skipping creation."
          else
            echo "Creating bucket $LAMBDA_CODE_BUCKET..."
            if [ "${{ secrets.AWS_REGION }}" = "us-east-1" ]; then
              aws s3api create-bucket --bucket $LAMBDA_CODE_BUCKET
            else
              aws s3api create-bucket \
                --bucket $LAMBDA_CODE_BUCKET \
                --region ${{ secrets.AWS_REGION }} \
                --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
            fi
          fi

      # Step 6: Upload Lambda Function Code to S3
      - name: Upload Lambda Function Code
        run: |
          LAMBDA_CODE_BUCKET="python-code-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}"
          LAMBDA_ZIP_FILE="build/lambda_function.zip"
          echo "Uploading Lambda function code to S3..."
          aws s3 cp $LAMBDA_ZIP_FILE s3://$LAMBDA_CODE_BUCKET/

      # Step 7: Deploy CloudFormation Stack
      - name: Deploy CloudFormation Stack
        run: |
          STACK_NAME="textract-stack"
          TEMPLATE_FILE="textract.yaml"
          echo "Deploying CloudFormation stack $STACK_NAME..."
          aws cloudformation deploy \
            --stack-name $STACK_NAME \
            --template-file $TEMPLATE_FILE \
            --capabilities CAPABILITY_NAMED_IAM \
            --parameter-overrides \
              LambdaCodeBucketName="python-code-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}" \
              TextractUploadBucketName="upload-textract-bucket-${{ secrets.AWS_ACCOUNT_ID }}-${{ secrets.AWS_REGION }}" \
              DynamoDBTableName="TextractData" \
              LambdaFunctionName="TextractFunction"

      # Step 8: Wait for CloudFormation Stack to Complete
      - name: Wait for CloudFormation Stack Creation
        run: |
          STACK_NAME="textract-stack"
          echo "Waiting for CloudFormation stack $STACK_NAME to complete..."
          aws cloudformation wait stack-create-complete --stack-name $STACK_NAME || {
            echo "Stack creation failed. Fetching stack events..."
            aws cloudformation describe-stack-events --stack-name $STACK_NAME
            exit 1
          }
          echo "CloudFormation stack $STACK_NAME created successfully."

      # Step 9: Verify Deployment
      - name: Verify Deployment
        run: |
          echo "Verifying deployment..."
          aws cloudformation describe-stacks --stack-name textract-stack

      # Cleanup Step: Delete all AWS resources if the workflow fails
      - name: Cleanup AWS Resources
        if: failure()
        run: |
          echo "Cleaning up AWS resources..."
          STACK_NAME="textract-stack"
          echo "Deleting CloudFormation stack $STACK_NAME..."
          aws cloudformation delete-stack --stack-name $STACK_NAME
          echo "Waiting for CloudFormation stack to be deleted..."
          aws cloudformation wait stack-delete-complete --stack-name $STACK_NAME
          echo "CloudFormation stack deleted successfully."